import time
import os
import platform
from datetime import datetime

# Classe para armazenar informações do usuário
class Usuario:
    def __init__(self, nome, cpf, data_nascimento, endereco):
        self.nome = nome
        self.cpf = cpf
        self.data_nascimento = data_nascimento
        self.endereco = endereco

# Classe para armazenar informações da conta
class Conta:
    def __init__(self, usuario, tipo_conta):
        self.usuario = usuario
        self.tipo_conta = tipo_conta
        self.saldo = 0
        self.transacoes = []

    def realizar_deposito(self, valor):
        self.saldo += valor
        data_hora = datetime.now().strftime("%d/%m/%Y %H:%M:%S")
        self.transacoes.append((valor, data_hora))

    def realizar_saque(self, valor):
        if valor <= self.saldo:
            self.saldo -= valor
            data_hora = datetime.now().strftime("%d/%m/%Y %H:%M:%S")
            self.transacoes.append((-valor, data_hora))
        else:
            print("Saldo insuficiente para o saque.")

# Funções auxiliares
def limpar_tela():
    sistema = platform.system()
    if sistema == "Windows":
        os.system("cls")
    else:
        os.system("clear")

def validar_string(mensagem):
    while True:
        entrada = input(mensagem)
        if entrada.isalpha():
            return entrada
        print("Entrada inválida. Por favor, insira apenas letras.")

def validar_cpf(mensagem):
    while True:
        cpf = input(mensagem)
        if cpf.isdigit() and len(cpf) == 11:
            return cpf
        print("Entrada inválida. O CPF deve ter 11 dígitos.")

def validar_data_nascimento(mensagem):
    while True:
        data = input(mensagem)
        try:
            datetime.strptime(data, "%d/%m/%Y")
            return data
        except ValueError:
            print("Formato inválido. Use dd/mm/yyyy.")

def validar_float(mensagem):
    while True:
        try:
            valor = float(input(mensagem))
            if valor >= 0:
                return valor
            print("O valor deve ser não negativo.")
        except ValueError:
            print("Entrada inválida. Por favor, insira um número.")

def opcao_1(conta):
    valor = validar_float("Qual o valor deseja depositar? ")
    conta.realizar_deposito(valor)
    print("Depósito realizado.")
    time.sleep(2)

def opcao_2(conta):
    valor = validar_float("Qual valor deseja sacar? ")
    conta.realizar_saque(valor)
    print("Saque realizado.")
    time.sleep(2)

def opcao_3(conta):
    print(f"Esse é seu saldo atual: R${conta.saldo:.2f}")
    input("\nPressione Enter para voltar ao menu principal...")

def opcao_4(conta):
    if conta.transacoes:
        print("\nExtrato de Saques e Depósitos:")
        for i, (valor, data_hora) in enumerate(conta.transacoes, 1):
            tipo_transacao = "Depósito" if valor > 0 else "Saque"
            print(f"{tipo_transacao} {i}: R${abs(valor):.2f} em {data_hora}")
    else:
        print("Nenhuma transação realizada ainda.")
    input("\nPressione Enter para voltar ao menu principal...")

def mostrar_menu(conta):
    print(f"\nMenu Principal - Conta de {conta.usuario.nome}")
    print("1. Depósito")
    print("2. Saque")
    print("3. Valor na conta")
    print("4. Extrato de Transações")
    print("5. Sair")

def cadastrar_usuario():
    print("\nCadastro de Usuário")
    nome = validar_string("Digite o nome: ")
    cpf = validar_cpf("Digite o CPF (11 dígitos): ")
    data_nascimento = validar_data_nascimento("Digite a data de nascimento (dd/mm/yyyy): ")
    endereco = input("Digite o endereço: ")
    return Usuario(nome, cpf, data_nascimento, endereco)

def cadastrar_conta(usuarios):
    usuario = cadastrar_usuario()
    tipo_conta = input("Digite o tipo de conta (Física/Jurídica): ").strip().lower()
    conta = Conta(usuario, tipo_conta)
    usuarios.append(conta)
    print("Conta cadastrada com sucesso!")

def listar_contas(usuarios):
    print("\nLista de Contas:")
    for i, conta in enumerate(usuarios, 1):
        print(f"Conta {i}:")
        print(f"  Nome: {conta.usuario.nome}")
        print(f"  CPF: {conta.usuario.cpf}")
        print(f"  Data de Nascimento: {conta.usuario.data_nascimento}")
        print(f"  Endereço: {conta.usuario.endereco}")
        print(f"  Tipo de Conta: {conta.tipo_conta}")
        print(f"  Saldo: R${conta.saldo:.2f}")
    input("\nPressione Enter para voltar ao menu principal...")

def menu():
    usuarios = []
    while True:
        limpar_tela()
        print("\nMenu Principal")
        print("1. Cadastrar Conta")
        print("2. Listar Contas")
        print("3. Acessar Conta Existente")
        print("4. Sair")
        
        escolha = input("Escolha uma opção: ")
        if escolha == '1':
            cadastrar_conta(usuarios)
        elif escolha == '2':
            listar_contas(usuarios)
        elif escolha == '3':
            if not usuarios:
                print("Nenhuma conta cadastrada. Cadastre uma conta primeiro.")
                time.sleep(2)
                continue
            listar_contas(usuarios)
            indice = int(input("Escolha o número da conta que deseja acessar: ")) - 1
            if 0 <= indice < len(usuarios):
                conta = usuarios[indice]
                while True:
                    mostrar_menu(conta)
                    escolha_conta = input("Escolha uma opção: ")
                    if escolha_conta == '1':
                        opcao_1(conta)
                    elif escolha_conta == '2':
                        opcao_2(conta)
                    elif escolha_conta == '3':
                        opcao_3(conta)
                    elif escolha_conta == '4':
                        opcao_4(conta)
                    elif escolha_conta == '5':
                        break
                    else:
                        print("Opção inválida. Tente novamente.")
                    time.sleep(2)
            else:
                print("Conta inválida.")
                time.sleep(2)
        elif escolha == '4':
            print("Saindo do menu. Até logo!")
            break
        else:
            print("Opção inválida. Tente novamente.")
        time.sleep(2)

# Iniciar o menu
menu()
